from flask import Flask, jsonify, request, redirect, render_template, send_from_directory, url_for, flash
import pandas as pd
import os
import google.generativeai as genai

from leaderboard import leaderboard
from trending import trend
from job_utils import select, specific, filter, specific_skill, get_salary_options, select_salary_get
from job_details import job_details_get
from course import subtopic_get, course_get
from roadmap import detailed_roadmap_get, index1_get
from task import generate
from assessment4 import build_assessment, extract_day_blocks, filter_content_by_day, generate_assessment_from_content, submit_assessment

from tryl import parse_tasks
from dashboard import get_assessment_data
from leaderboard import leaderboard

app = Flask(__name__, static_folder='static')

# Dataset
df = pd.read_excel('course.xlsx')

# Global variable for salary options
salary_options = {}

# Your Gemini API key for the second feature
GEMINI_API_KEY = 'API'
if not GEMINI_API_KEY:
    raise ValueError("Please set the GEMINI_API_KEY environment variable")
genai.configure(api_key=GEMINI_API_KEY)

# Routings
@app.route('/')
def index():
    return render_template('log.html')  # Render the main login page

@app.route('/home')
def home():
    return render_template('home.html', salary_options=salary_options)

@app.route('/trending_domains', methods=['POST'])
def show_trending_domains():
    return render_template('home.html', domains=trend(), salary_options=salary_options)  # Give trending domains

@app.route('/select_domain/<domain>', methods=['GET'])
def select_domain(domain):
    message, jobs = select(domain)
    return render_template('home.html', message=message, jobs=jobs, domain=domain, salary_options=salary_options) # Select Domain

@app.route('/specific_domain', methods=['POST'])
def specific_domain():
    message, jobs = specific()
    return render_template('home.html', message=message, jobs=jobs, salary_options=salary_options)

@app.route('/specific_job', methods=['POST'])
def specific_job():
    # Get job title from the form
    job_title = request.form.get('job_title', '').strip()
    
    if not job_title:
        message = "Please enter a job title."
        return render_template('home.html', message=message, jobs=[])
    
    message, jobs = filter(job_title)
    return render_template('home.html', message=message, jobs=jobs, salary_options=salary_options)

@app.route('/specific_skills', methods=['POST'])
def specific_skills():
    # Get the skills entered by the user and clean the list
    skills = request.form.get('skills', '').split(",")
    message, jobs = specific_skill(skills)
    return render_template('home.html', message=message, jobs=jobs, salary_options=salary_options)

@app.route('/specific_salary', methods=['POST'])
def specific_salary():
    selected_salary = request.form.get('salary', '').strip()

    if selected_salary == "Select by Salary":
        message = "Please select a valid salary range."
        return render_template('home.html', message=message, jobs=[], salary_options=salary_options)
    message, jobs = select_salary_get(selected_salary)
    return render_template('home.html', message=message, jobs=jobs, salary_options=salary_options)


@app.route('/course')
def course():
    return course_get(salary_options)

@app.route('/subtopic/<subtopic_name>', methods=['GET', 'POST'])
def subtopic(subtopic_name):
    return subtopic_get(subtopic_name)

@app.route('/job_details/<job_id>', methods=['GET'])
def job_details(job_id):
    return job_details_get(job_id)

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404  # Create a 404.html template for user-friendly error messages


@app.route('/index1', methods=['GET'])
def index1():
    return index1_get()

# Route for the detailed roadmap page (generated by Gemini)
@app.route('/roadmap', methods=['GET'])
def detailed_roadmap():
    return detailed_roadmap_get()

def parse_markdown(file_path):
    """Parses the markdown file into a structured format."""
    content = {}
    with open(file_path, 'r') as f:
        md_content = f.read()

    lines = md_content.splitlines()
    current_phase = None
    current_topic = None

    for line in lines:
        line = line.strip()
        if "Subtopics:" in line:  # Skip "Subtopics" header if present
            continue
        if line.startswith("Key Learning Points:"):  # Skip Key Learning Points lines
            continue
        if line.startswith("## "):  # Start of a new phase
            current_phase = line[3:].strip()
            content[current_phase] = {}
            current_topic = None  # Reset current topic
        elif line.startswith("**") and line.endswith("**"):  # Start of a new topic
            current_topic = line.strip("**").strip()
            if current_phase:
                if current_topic not in content[current_phase]:
                    content[current_phase][current_topic] = {"Subtopics": []}
        elif line.startswith("*"):  # Subtopics under a topic
            if current_topic and current_phase:
                content[current_phase][current_topic]["Subtopics"].append(line.strip("* ").strip())

    return content

@app.route('/schedule')
def schedule():
    generate()
    return render_template("home1.html")

@app.route('/tasks')
def get_tasks():
    return jsonify(parse_tasks())

@app.route('/get_assessment')
def get_assessment():
    return build_assessment()

@app.route('/assessment4.html')
def assessment_page():
    return render_template("assessment4.html")

@app.route('/submit_assessment', methods=['POST'])
def sub():
    return submit_assessment()

@app.route('/analysis')
def assess():
    return render_template('analysis.html')

@app.route('/LeaderBoard')
def leaderBoard():
    return leaderboard()

@app.route('/static/<path:path>')
def serve_static(path):
    return send_from_directory('static', path)

@app.route('/api/marks')
def getasses():
    return get_assessment_data()

@app.route('/dash')
def dash():
    return render_template('home1.html')


if __name__ == '__main__':
    salary_options = get_salary_options()
    app.run(debug=True)
